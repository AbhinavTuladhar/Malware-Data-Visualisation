import pandas as pd
import streamlit as st
import plotly.express as px


st.set_page_config(layout='wide')

# Now, read the names of the semi-categorical attributes from the respective text file.
with open('Semi-categorical columns.txt', 'r') as file:
    columns = file.readlines()
    columns = [value.rstrip() for value in columns]
columns.sort()

# ---------------------------------------SIDEBAR PORTION START---------------------------------------- # 
fig_height = st.sidebar.slider(
    'Height of the figure',
    min_value=40.0, max_value=72.0, step=10.0, value=65.0
)
# ----------------------------------------SIDEBAR PORTION END----------------------------------------- #

title = st.title('Malware data visualisation')
st.markdown("""
    Use this page to visualise the semi-categorical&copy; variables of the malware dataset.
""")

source_file = st.file_uploader(
    'Upload the Malware CSV file. Default included.'
)
if source_file is None:
    df = pd.read_csv('MALWARE_FINAL.csv')
    st.write("Opened the default file!")
else:
    df = pd.read_csv(source_file)
    st.write('Read the custom file!')
    
# Let's change the data types of the columns in order to properly show the graphs
for column in columns:
    df[column] = df[column].astype('str')

st.write(df.head())

selected_x = st.selectbox(
    'Choose a feature:',
    columns
)

# And then sort in ascending order.
df = df.sort_values(by=selected_x, ascending=True)


# ----------------------------------------HISTOGRAM PLOT START---------------------------------------- #
st.markdown("## Histogram plot")
log_scale = st.selectbox(
    'Would you like to use a log scale?',
    ['Yes', 'No']
)

# Get the unique values in the column and sort them in ascending order. This is for sorting the x axis.
unique_values_str = df[selected_x].unique()
try:
    unique_values_num = list(map(int, unique_values_str))
except ValueError:
    unique_values_num = list(map(float, unique_values_str))
unique_values_num.sort()

log_y = True if log_scale == 'Yes' else False
fig = px.histogram(
    data_frame=df,
    x=selected_x,
    barmode='group',
    orientation='v',
    color='Malware',
    histfunc='count',
    text_auto=True,
    log_y=log_y,
    height=fig_height * 10,
    title=f'Counts of {selected_x} by class'
).update_xaxes(categoryorder='array', categoryarray=unique_values_num)

st.plotly_chart(fig, theme=None, use_container_width=True)
# -----------------------------------------HISTOGRAM PLOT END----------------------------------------- #

# ------------------------------------------PIE CHART START------------------------------------------- #
st.markdown("## Pie chart")
counts = df.groupby([selected_x, 'Malware']).size().reset_index(name='Count')

fig = px.pie(
    counts, 
    values='Count', 
    names=selected_x, 
    facet_col='Malware',
    title=f'{selected_x} counts by file type',
    height=fig_height * 10
)
st.plotly_chart(fig, theme=None, use_container_width=True)
# -------------------------------------------PIE CHART END-------------------------------------------- #