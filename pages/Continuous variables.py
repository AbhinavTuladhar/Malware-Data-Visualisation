import pandas as pd
from os import chdir
from matplotlib import pyplot as plt
import seaborn as sns
import streamlit as st
import numpy as np


# ---------------------------------------Setting up some things--------------------------------------- #
st.set_page_config(layout='wide')

# ---------------------------------------SIDEBAR PORTION START---------------------------------------- # 
fig_width = st.sidebar.slider(
    'Width of the figure',
    min_value=8.0, max_value=20.0, step=0.5, value=15.0
)
fig_height = st.sidebar.slider(
    'Height of the figure',
    min_value=5.0, max_value=10.0, step=0.5
)
# ----------------------------------------SIDEBAR PORTION END----------------------------------------- #


# Now, read the names of the continuous attributes from the respective text file.
with open('Numeric columns.txt', 'r') as file:
    columns = file.readlines()
    columns = [value.rstrip() for value in columns]
# Sort these column names so that they are a bit easier to find.
columns.sort()

# Read the seaborn palette values as well.
with open('palette_values.txt', 'r') as file:
    palette_values = file.readlines()
    palette_values = [palette_name.rstrip() for palette_name in palette_values]


# Begin actually putting things on the page.
title = st.title('Malware data visualisation')
st.markdown("""
    Use this page to visualise the continuous variables of the malware dataset.
""")

# Upload a customer file if hte user wants.
# By default, the MalwareDataReduced.csv file is used.
source_file = st.file_uploader(
    'Upload the Malware CSV file. Default included.'
)
if source_file is None:
    df = pd.read_csv('MALWARE_FINAL.csv')
    st.write("Opened the default file!")
else:
    df = pd.read_csv(source_file)
    st.write('Read the custom file!')
    
st.write(df.head())

# Choose the variable for the x-axis.
selected_x = st.selectbox(
    'What do you want the x variable to be?',
    columns
)
# ---------------------------------------BOXPLOT PORTION START---------------------------------------- #
st.markdown("""
    # Box plot
""")

# Dealing with whether to use a linear, sym-log or log scale.
log_scale = st.selectbox(
    'Which scale would you like to use for the boxplot?',
    ['linear', 'symlog', 'log']
)

st.markdown("""
    #### A log scale is highly recommended in most columns so that less-occurring data are visible.
""")

# FOR THE BOXPLOT
fig, ax = plt.subplots(figsize=(fig_width, fig_height))
sns.set(font_scale=1)
ax = sns.boxplot(
    data=df,
    x=selected_x,
    y='Malware',
    orient='h',
    palette=np.random.choice(palette_values)
)
ax.set_xscale(log_scale)
plt.title(f'Distribution of {selected_x} VS Malware')
plt.tight_layout()
plt.grid()
st.pyplot(fig)
# ----------------------------------------BOXPLOT PORTION END----------------------------------------- #

# ---------------------------------------HISTPLOT PORTION START--------------------------------------- #
st.markdown("""
    # Histogram plot
""")

bin_count = st.number_input(
    label='How many bins do you want?',
    min_value=10,
    max_value=500,
    value=100,
    step=10
)

hist_log_scale = st.selectbox(
    'Do you want to use a log scale for the histplot?',
    ['Yes', 'No']
)

fig, ax = plt.subplots(figsize=(fig_width, fig_height))
sns.set(font_scale=1)
ax = sns.histplot(
    data=df,
    x=selected_x,
    hue='Malware',
    palette=np.random.choice(palette_values),
    bins=bin_count,
    multiple='dodge',
    shrink=0.9,
    kde=True
)
if hist_log_scale == 'Yes':
    ax.set_yscale("symlog")
else:
    ax.set_yscale('linear')
plt.title(f'Distribution of {selected_x} VS Malware')
plt.tight_layout()
plt.grid()
st.pyplot(fig)

# ----------------------------------------HISTPLOT PORTION END---------------------------------------- #