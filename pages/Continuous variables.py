import pandas as pd
import streamlit as st
import plotly.express as px
import plotly.figure_factory as ff


# ---------------------------------------Setting up some things--------------------------------------- #
st.set_page_config(layout='wide')

# ---------------------------------------SIDEBAR PORTION START---------------------------------------- # 
fig_height = st.sidebar.slider(
    'Height of the figure',
    min_value=40.0, max_value=72.0, step=10.0, value=65.0
)
# ----------------------------------------SIDEBAR PORTION END----------------------------------------- #


# Now, read the names of the continuous attributes from the respective text file.
with open('Numeric columns.txt', 'r') as file:
    columns = file.readlines()
    columns = [value.rstrip() for value in columns]
# Sort these column names so that they are a bit easier to find.
columns.sort()

# Begin actually putting things on the page.
title = st.title('Malware data visualisation')
st.markdown("""
    Use this page to visualise the continuous variables of the malware dataset.
""")

# Upload a customer file if hte user wants.
# By default, the MalwareDataReduced.csv file is used.
source_file = st.file_uploader(
    'Upload the Malware CSV file. Default included.'
)
if source_file is None:
    df = pd.read_csv('MALWARE_FINAL.csv')
    st.write("Opened the default file!")
else:
    df = pd.read_csv(source_file)
    st.write('Read the custom file!')
    
st.write(df.head())

# Choose the variable for the x-axis.
selected_x = st.selectbox(
    'Choose a feature:',
    columns
)
# ---------------------------------------BOXPLOT PORTION START---------------------------------------- #
st.markdown("""
    # Box plot
""")

log_scale = st.selectbox(
    'Use a log scale for the boxplot?',
    ['Yes', 'No']
)

log_x = True if log_scale == 'Yes' else False
fig = px.box(
    df,
    orientation='h',
    x=selected_x,
    notched=True,
    color='Malware',
    log_x=log_x, 
    height=fig_height * 10,
    title=f'Distribution of {selected_x} by class'
)
st.plotly_chart(fig, theme=None, use_container_width=True)
# ----------------------------------------BOXPLOT PORTION END----------------------------------------- #

# ---------------------------------------HISTPLOT PORTION START--------------------------------------- #
st.markdown("""
    # Histogram plot
""")

bin_count = st.number_input(
    label='How many bins do you want?',
    min_value=10,
    max_value=500,
    value=100,
    step=10,
    key=1
)

hist_log_scale = st.selectbox(
    'Do you want to use a log scale for the histplot?',
    ['Yes', 'No']
)

# Histplot version 1
use_log = True if hist_log_scale == 'Yes' else False
fig = px.histogram(
    df,
    x=selected_x,
    color='Malware',
    barmode='group',
    nbins=bin_count,
    log_y=use_log,
    title=f'Distribution of {selected_x} by class',
    height=fig_height * 10
).update_layout(bargap=0.2)
st.plotly_chart(fig, theme=None, use_container_width=True)

# ----------------------------------------HISTPLOT PORTION END---------------------------------------- #

# -------------------------------------------KDE PLOT START------------------------------------------- # 
st.markdown("""
    # KDE plot
""")

bin_count_kde = st.number_input(
    label='How many bins do you want?',
    min_value=10,
    max_value=500,
    value=100,
    step=10,
    key=2
)

kde_log_scale = st.selectbox(
    'Do you want to use a log scale for the KDE plot?',
    ['Yes', 'No']
)

# Some shenanigans I had to do for create_distplot -_-
df1 = df.query("Malware == 'Yes'")[selected_x].tolist()
df2 = df.query("Malware == 'No'")[selected_x].tolist()

hist_data = [df1, df2]
group_labels = ['Malware', 'Not Malware']
y_type = 'linear' if kde_log_scale == 'No' else 'log'

min_value = min([value for sublist in hist_data for value in sublist])
max_value = max([value for sublist in hist_data for value in sublist])
bin_width = (max_value - min_value) / bin_count_kde
colours = ['#636efa', '#ef553b']

fig = ff.create_distplot(
    hist_data=hist_data,
    group_labels=group_labels,
    bin_size=[bin_width, bin_width],
    show_rug=False,
    colors=colours
).update_yaxes(type=y_type) \
    .update_layout(
        bargap=0.2, 
        title_text=f'KDE plot of {selected_x} by class', 
        height=fig_height * 10
    ) 

st.plotly_chart(fig, theme=None, use_container_width=True)

# --------------------------------------------KDE PLOT END-------------------------------------------- #
